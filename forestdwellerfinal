#include <kipr/botball.h>

int l_motor = 0;
int r_motor = 3;
int speed = 60;
int rspeed = 70;
int fastspeed = 100;
int pause= 1000;
int mpause = 2000;
int backtime = 1000;
int turntime= 1000;
int rbump = 9;
int lbump = 0;
int counter = 0; //true variale
int evasivetime = 1300; //evasive time 2 seconds
int main()
{
  shut_down_in(305.0);
   while(1){ //while true (1)
     // stuff i want to loop
    forward(); //call function forward
     //look for collision
     if(digital(rbump)){ //if collision is found (true 1) right motor from head
      backward();// back up if collision for backsleep
      left(); // turn left for turntime
          counter = counter + 1;
     }
     if(digital(lbump)){//if hits left bumber
       backward();
       right();
       counter = counter + 1;
   }
     if(counter == 5){
       printf("Evasive Manuever/n");
       evasive ();
       counter = 0;
     }
}
  time(5000);
}

//FUNCTION DEFINITIONS//
void forward(){
   motor(l_motor, speed);
   motor(r_motor, rspeed); // go forward  
}
void backward(){
  motor(l_motor, -speed);
  motor(r_motor, -rspeed);
  msleep(backtime);
  ao();
}
void left(){
  motor(r_motor, rspeed);
  msleep(turntime);
  ao();
}
void right(){
  motor(l_motor, speed);
  msleep(turntime);
  ao();
}
void evasive(){
  motor(l_motor, fastspeed);
  motor(r_motor, -fastspeed);
  msleep(evasivetime);
  ao();
}
